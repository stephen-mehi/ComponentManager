
@model IEnumerable<IComponentConstructionData>


<script>

    $(document).ready(function () {

        $.ComponentProfilesNameSpace = {};


        $.ComponentProfilesNameSpace.BuildNavLinks = function () {

            $("#ComponentNavList").empty();

            var linkText =
                '<li><a href="@Url.Action("Index","Home")">Home</a></li>' +
                '<li><a class="ComponentNavLink" href="@Url.RouteUrl("GetComponentObjects")">Registered Components</a></li>';

            $("#ComponentNavList").append(linkText);

        };


        $.ComponentProfilesNameSpace.HandleRenameProfileRequest = function (event, $self) {

            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }


            var url = $self.attr("action");
            var data = $self.serialize();
            var method = $self.attr("method");

            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                data: data,
                dataType: "html",
                success: function (response) {

                    //find modal
                    var $modal = $self.closest(".modal");

                    $modal.modal("hide");

                    //after hidden
                    $modal.on('hidden.bs.modal', function () {

                        //get profiles again
                        var ajaxOptions = {
                            url: "@Url.RouteUrl("GetComponentObjectProfiles", new { ComponentID = Model?.FirstOrDefault()?.ComponentID })",
                            method: "get",
                            dataType: "html",
                            success: function (response) {

                                $("#ProfileCollectionTable").replaceWith($(response).find("#ProfileCollectionTable"));
                            }
                        };


                        $.ajax(ajaxOptions);
                    });

                }

            };

            event.preventDefault();//prevent normal submission


            //return ref to ajax obj
            return $.ajax(ajaxOptions);

        };

        $.ComponentProfilesNameSpace.HandleRefreshProfileListRequest = function (event, $self) {

            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }


            var url = $self.attr("href");
            var method = "get";


            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                dataType: "html",
                success: function (response) {
                    $("#ProfileCollectionTable").replaceWith($(response).find("#ProfileCollectionTable"));
                }
            };

            event.preventDefault();//prevent normal submission


            //return ref to ajax obj
            return $.ajax(ajaxOptions);


        };

        $.ComponentProfilesNameSpace.HandleDeleteProfileRequest = function (event, $self) {

            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }


            var url = $self.attr("action");
            var data = $self.serialize();
            var method = $self.attr("method");


            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                data: data,
                dataType: "html",
                success: function (response) {

                    //find modal
                    var $modal = $self.closest(".modal");

                    $modal.modal("hide");

                    //after hidden
                    $modal.on('hidden.bs.modal', function () {

                        //get comps
                        var ajaxOptions = {
                            url: "@Url.RouteUrl("GetComponentObjectProfiles", new { ComponentID = Model?.FirstOrDefault()?.ComponentID })",
                            method: "get",
                            dataType: "html",
                            success: function (response) {
                                $("#ProfileCollectionTable").replaceWith($(response).find("#ProfileCollectionTable"));
                            },
                            error: function (xhr, status, error) {
                                alert("error");
                            }
                        };

                        $.ajax(ajaxOptions);
                    });

                }
            };

            event.preventDefault();//prevent normal submission


            //return ref to ajax obj
            return $.ajax(ajaxOptions);

        };


        $.ComponentProfilesNameSpace.HandleGetProfileRequest = function (event, $self) {
            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }


            var url = $self.attr("href");
            var method = "get";


            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                dataType: "html",
                success: function (response) {
                    $("#ComponentProfileCollectionContainer").replaceWith(response);
                }

            };

            event.preventDefault();//prevent normal submission


            //return ref to ajax obj
            return $.ajax(ajaxOptions);

        };

        $.ComponentProfilesNameSpace.HandleCreateProfileRequest = function (event, $self) {
            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }


            var url = $self.attr("action");
            var data = $self.serialize();
            var method = $self.attr("method");


            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                data: data,
                dataType: "html",
                success: function (response) {

                    //find modal
                    var $modal = $self.closest(".modal");

                    $modal.modal("hide");

                    //after hidden
                    $modal.on('hidden.bs.modal', function () {

                        //get comps
                        var ajaxOptions = {
                            url: "@Url.RouteUrl("GetComponentObjectProfiles", new { ComponentID = Model?.FirstOrDefault()?.ComponentID })",
                            method: "get",
                            dataType: "html",
                            success: function (response) {
                                $("#ProfileCollectionTable").replaceWith($(response).find("#ProfileCollectionTable"));
                            },
                            error: function (xhr, status, error) {
                                alert("error");
                            }
                        };

                        $.ajax(ajaxOptions);
                    });

                }


            };

            event.preventDefault();//prevent normal submission


            //return ref to ajax obj
            return $.ajax(ajaxOptions);

        };


        $.ComponentProfilesNameSpace.HandleGetActionsRequest = function (event, $self) {

            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }

            var url = $self.attr("href");
            var method = "get";

            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                dataType: "html",
                success: function (response) {

                    //$("#ComponentProfileCollectionContainer").replaceWith(response);
                    $("#InnerBodyContentContainer").empty();
                    $("#InnerBodyContentContainer").append(response);
                }
            };

            event.preventDefault();//prevent normal submission

            //return ref to ajax obj
            return $.ajax(ajaxOptions);
        };

        $.ComponentProfilesNameSpace.HandleGetStateRequest = function (event, $self) {

            //return if should open new tab
            if ($self.attr("target") === "_blank") {
                return null;
            }

            var url = $self.attr("href");
            var method = "get";

            //build request
            var ajaxOptions = {
                url: url,
                method: method,
                dataType: "html",
                success: function (response) {

                    $("#InnerBodyContentContainer").empty();
                    $("#InnerBodyContentContainer").append(response);
                }
            };

            event.preventDefault();//prevent normal submission

            //return ref to ajax obj
            return $.ajax(ajaxOptions);
        };



    });

</script>

<div id="ComponentProfileCollectionContainer" class="well">


    <h3>Component: @Model?.FirstOrDefault()?.ComponentID</h3>

    <a id="RefreshComponentsProfilesListLink" title="Refresh List" href="@Url.RouteUrl("GetComponentObjectProfiles", new { ComponentID = Model?.FirstOrDefault()?.ComponentID })" data-method="get"><span class="glyphicon glyphicon-refresh"></span></a>

    <div>
        <table id="ProfileCollectionTable" class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>
                    <th>Profile Name</th>
                    <th>Is Active</th>
                    <th>Created By</th>
                    <th>Date Created</th>
                    <th>Modified By</th>
                    <th>Date Modified</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>

                @if (Model != null && Model.Count() > 0)
                {
                    int i = 0;
                    foreach (var compProfile in Model)
                    {
                        <tr>
                            <td>@compProfile.AdapterProfileName</td>
                            <td>@compProfile.IsActive</td>
                            <td>@compProfile.CreatedBy</td>
                            <td>@compProfile.DateCreated</td>
                            <td>@compProfile.ModifiedBy</td>
                            <td>@compProfile.DateModified</td>
                            <td>

                                @{
                                    string deleteModalID = "DeleteComponentProfileModal" + "_" + i;
                                    string deleteModalIDprefixed = "#DeleteComponentProfileModal" + "_" + i;
                                }

                                <a class="btn btn-sm btn-danger" title="Delete component" href="#" data-toggle="modal" data-target="@deleteModalIDprefixed"><span class="glyphicon glyphicon-remove"></span></a>

                                <div data-backdrop="false" class="modal fade" id="@deleteModalID" role="dialog">
                                    <div class="modal-dialog">

                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                <h4 class="modal-title">Delete Component Profile</h4>
                                            </div>
                                            <div class="modal-body">
                                                <p>Are you sure you want to delete this component profile (@compProfile.AdapterProfileName)?</p>
                                            </div>
                                            <div class="modal-footer">
                                                <form class="DeleteComponentProfileForm" action="@Url.RouteUrl("DeleteComponentObjectProfile", new { ComponentID = compProfile.ComponentID, ProfileName = compProfile.AdapterProfileName })" method="delete">
                                                    <div class="form-group">
                                                        <input type="submit" class="btn btn-success" value="Delete" />
                                                        <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <span> | </span>

                                <a href="@Url.RouteUrl("GetComponentObjectProfile", new { ComponentID = compProfile.ComponentID, ProfileName = compProfile.AdapterProfileName })" data-method="get" class="GetProfileLink btn btn-sm btn-primary" title="View Component Profile"><span class="glyphicon glyphicon-pencil"></span></a>

                                <span> | </span>

                                @{
                                    string compActionsURL = Url.RouteUrl("GetActionsOnComponentObjectProfile_All", new { ComponentID = compProfile.ComponentID, ProfileName = compProfile.AdapterProfileName });
                                }

                                @if (string.IsNullOrEmpty(compProfile.AssemblyPath) || string.IsNullOrEmpty(compProfile.ClassName))
                                {

                                    <div title="Component actions not available because the profile is not bound to an assembly. Please complete profile configuration">
                                        <a href="@compActionsURL" data-method="get" class="disabled GetActionsLink btn btn-sm btn-primary" title="View Component Actions"><span class="glyphicon glyphicon-flash"></span></a>
                                    </div>
                                }
                                else
                                {
                                    <a href="@compActionsURL" data-method="get" class="GetActionsLink btn btn-sm btn-primary" title="View Component Actions"><span class="glyphicon glyphicon-flash"></span></a>

                                }

                                <span> | </span>

                                @{
                                    string compStateURL = Url.RouteUrl("ConnectComponentAndReadState", new { ComponentID = compProfile.ComponentID, ProfileName = compProfile.AdapterProfileName });
                                }

                                @if (string.IsNullOrEmpty(compProfile.AssemblyPath) || string.IsNullOrEmpty(compProfile.ClassName))
                                {

                                    <div title="Component state is not available because the profile is not bound to an assembly. Please complete profile configuration">
                                        <a href="@compStateURL" data-method="get" class="disabled GetStateLink btn btn-sm btn-primary" title="View Component Actions"><span class="glyphicon glyphicon-tasks"></span></a>
                                    </div>
                                }
                                else
                                {
                                    <a href="@compStateURL" data-method="get" class="GetStateLink btn btn-sm btn-primary" title="View Component State"><span class="glyphicon glyphicon-tasks"></span></a>

                                }

                                <span> | </span>


                                @{

                                    string renameModalID = "RenameComponentModal" + "_" + i;
                                    string renameModalIDprefixed = "#RenameComponentModal" + "_" + i;
                                }

                                <a class="btn btn-sm btn-info" title="Rename profile" href="#" data-toggle="modal" data-target="@renameModalIDprefixed"><span class="glyphicon glyphicon-pencil"></span></a>


                                <div data-backdrop="false" class="modal fade" id="@renameModalID" role="dialog">
                                    <div class="modal-dialog">

                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                <h4 class="modal-title">Rename Component Profile</h4>
                                            </div>
                                            <div class="modal-body">
                                                <p>Please supply new profile name</p>
                                            </div>
                                            <div class="modal-footer">
                                                <form id="RenameComponentProfileForm" action="@Url.RouteUrl("RenameComponentObjectProfile", new { ComponentID = compProfile.ComponentID, ProfileName = compProfile.AdapterProfileName })" method="put">
                                                    <div class="form-group">
                                                        <label class="control-label" for="NewComponentName">New Profile Name</label>
                                                        <input id="NewProfileName" class="form-control" type="text" name="NewName" value="New Name">
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="submit" class="btn btn-success" value="Rename profile" />
                                                        <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </td>
                        </tr>


                                            i++;
                                        }

                                    }
            </tbody>

        </table>
    </div>




    <a class="btn btn-primary btn-lg" data-toggle="modal" data-target="#CreateComponentProfileModal"><span class="glyphicon glyphicon-plus-sign"></span> Create New</a>


    <div data-backdrop="false" class="modal fade" id="CreateComponentProfileModal" role="dialog">
        <div class="modal-dialog">

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Create Component Profile</h4>
                </div>
                <div class="modal-body">
                    <p>Please supply unique name for new profile</p>
                </div>
                <div class="modal-footer">
                    <form id="CreateComponentProfileForm" action="@Url.RouteUrl("CreateComponentObjectProfile", new { ComponentID = Model?.FirstOrDefault()?.ComponentID, ProfileName = "NewProfile"})" method="post">
                        <div class="form-group">
                            <label class="control-label" for="NewComponentName">New Profile Name</label>
                            <input id="NewComponentName" class="form-control" type="text" name="ProfileName">
                        </div>
                        <div class="form-group">
                            <input type="submit" class="btn btn-success" value="Create New profile" />
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

</div>
